name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

env:
  S3_BUCKET_NAME: tpc-s3-bucket

jobs:
  build:
    name: CI (continuous-integration) part
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-jdk-${{ matrix.java }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-jdk-${{ matrix.java }}-maven-

      - name: Maven Verify
        run: mvn -B clean verify
      - name: Test Coverage
        run: mvn -B clean test

  deploy:
    name: CD (continuous-deployment) part
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app-name: [ 'code-deploy-tpc' ]
        s3-bucket: [ 'tpc-s3-bucket' ]
        s3-filename: [ '${{ github.sha }}' ]
        deploy-group: [ 'tpc-code-deploy-group' ]
    needs: build
    steps:
#      - name: Maven Package
#        run: mvn -B clean package -DskipTests

      - name: Copy Jar
        run: cp /home/ec2-user/server/*.jar ./deploy
        shell: bash

      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip ./deploy
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{ matrix.app-name }} \
          --description "Revision of the ${{ matrix.appname }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{ matrix.s3-bucket }}/${{ matrix.s3-filename }}.zip \
          --source ./deploy

      - name: Creating AWS Deployment
        run: |
          aws deploy create-deployment \
          --application-name ${{ matrix.app-name }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ matrix.deploy-group }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ matrix.s3-bucket }},key=${{ matrix.s3-filename }}.zip,bundleType=zip \

#      - name: Upload to S3
#        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

#      - name: Create CodeDeploy Deployment
#        id: deploy
#        run: |
#          aws deploy create-deployment \
#            --application-name code-deploy-tpc \
#            --deployment-group-name tpc-code-deploy-group \
#            --deployment-config-name CodeDeployDefault.OneAtATime \
#            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
